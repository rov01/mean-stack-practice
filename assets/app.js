angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsSvc",function(t,o,e){t.addPost=function(){t.postBody&&e.create({username:"dickeyxxx",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},e.fetch().success(function(o){t.posts=o}).error(function(t){console.log("error"),console.log(t)})}]),angular.module("app").service("PostsSvc",["$http",function(t){console.log("error"),this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.register=function(t,e){o.register(t,e).then(function(t){console.log(t)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.register=function(o,e){return t.post("/api/users",{username:o,password:e})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZS5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzIiwiJGVtaXQiLCJkYXRhIiwiJGh0dHAiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic2VydmljZSIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJ0b2tlbiIsInZhbCIsImRlZmF1bHRzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUFBLFlDWUFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBRUFBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0pBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FFQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNsQkFmLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsUUFBQSxXQUFBLFNBQUFDLEVBQUFhLEVBQUFDLEdBQ0FkLEVBQUFlLFFBQUEsV0FDQWYsRUFBQWdCLFVBQ0FGLEVBQUFHLFFBQ0FWLFNBQUEsWUFDQVcsS0FBQWxCLEVBQUFnQixXQUNBRyxRQUFBLFNBQUFDLEdBQ0FwQixFQUFBcUIsTUFBQUMsUUFBQUYsR0FDQXBCLEVBQUFnQixTQUFBLFFBS0FGLEVBQUFTLFFBQ0FKLFFBQUEsU0FBQUUsR0FDQXJCLEVBQUFxQixNQUFBQSxJQUVBRyxNQUFBLFNBQUFILEdBQ0FJLFFBQUFDLElBQUEsU0FDQUQsUUFBQUMsSUFBQUwsUUNwQkF4QixRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLFlBQUEsUUFBQSxTQUFBZCxHQUNBWSxRQUFBQyxJQUFBLFNBQ0FFLEtBQUFMLE1BQUEsV0FDQSxNQUFBVixHQUFBZ0IsSUFBQSxlQUdBRCxLQUFBWCxPQUFBLFNBQUFHLEdBQ0EsTUFBQVAsR0FBQU8sS0FBQSxhQUFBQSxPQ0lBdkIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBSyxHQUVBTCxFQUFBOEIsU0FBQSxTQUFBdkIsRUFBQUMsR0FDQUgsRUFBQXlCLFNBQUF2QixFQUFBQyxHQUNBQyxLQUFBLFNBQUFOLEdBQ0FzQixRQUFBQyxJQUFBdkIsU0NOQU4sUUFBQUMsT0FBQSxPQUNBaUMsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUFsQyxXQUFBLFlBQUFtQyxZQUFBLGVBQ0FELEtBQUEsYUFBQWxDLFdBQUEsZUFBQW1DLFlBQUEsa0JBQ0FELEtBQUEsVUFBQWxDLFdBQUEsWUFBQW1DLFlBQUEsa0JDTEFyQyxRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLFdBQUEsUUFBQSxTQUFBZCxHQUNBLEdBQUFzQixHQUFBUCxJQUNBTyxHQUFBQyxRQUFBLFdBQ0EsTUFBQXZCLEdBQUFnQixJQUFBLGNBQ0FRLFNBQUFDLFNBQUFWLEtBQUFXLFVBSUFKLEVBQUE3QixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUssR0FBQU8sS0FBQSxpQkFDQWIsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBK0IsR0FHQSxNQUZBTCxHQUFBSSxNQUFBQyxFQUFBNUIsS0FDQUMsRUFBQTRCLFNBQUFKLFFBQUFLLE9BQUEsVUFBQUYsRUFBQTVCLEtBQ0F1QixFQUFBQyxhQUlBRCxFQUFBTCxTQUFBLFNBQUF2QixFQUFBQyxHQUNBLE1BQUFLLEdBQUFPLEtBQUEsY0FDQWIsU0FBQUEsRUFBQUMsU0FBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnbmdSb3V0ZSddKVxyXG4iLCIvKiBcclxuKiBAQXV0aG9yOiByb3ZlcnpvblxyXG4qIEBEYXRlOiAgIDIwMTUtMDQtMTcgMTQ6NDI6NTRcclxuKiBATGFzdCBNb2RpZmllZCBieTogICByb3ZlcnpvblxyXG4qIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTUtMDQtMTcgMTQ6NDQ6MTFcclxuKi9cclxuXHJcbi8qKlxyXG4qIGFwcCBNb2R1bGVcclxuKlxyXG4qIERlc2NyaXB0aW9uXHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG5cdCRzY29wZS4kb24oJ2xvZ2luJyxmdW5jdGlvbihfLHVzZXIpe1xyXG5cdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxyXG5cdH0pXHJcbn1dKSIsIi8qIFxyXG4qIEBBdXRob3I6IHJvdmVyem9uXHJcbiogQERhdGU6ICAgMjAxNS0wNC0xNiAxNjowNzoxMVxyXG4qIEBMYXN0IE1vZGlmaWVkIGJ5OiAgIHJvdmVyem9uXHJcbiogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxNS0wNC0xNyAxNDo1Njo0NlxyXG4qL1xyXG5cclxuLyoqXHJcbiogYXBwIE1vZHVsZVxyXG4qXHJcbiogRGVzY3JpcHRpb25cclxuKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBbJyRzY29wZScsICdVc2VyU3ZjJyAsICBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XHJcblxyXG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuXHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpXHJcblx0XHQudGhlbihmdW5jdGlvbihyZXMpe1xyXG5cdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJyxyZXMuZGF0YSlcclxuXHRcdH0pXHJcblx0fVxyXG59XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRzY29wZSwkaHR0cCwgUG9zdHNTdmMpIHtcclxuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCl7XHJcblx0XHRpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XHJcblx0XHRcdFBvc3RzU3ZjLmNyZWF0ZSh7XHJcblx0XHRcdFx0dXNlcm5hbWUgOiAnZGlja2V5eHh4JyxcclxuXHRcdFx0XHRib2R5OiRzY29wZS5wb3N0Qm9keVxyXG5cdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xyXG5cdFx0XHRcdCRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXHJcblx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbFxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0UG9zdHNTdmMuZmV0Y2goKVxyXG5cdC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKXtcclxuXHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzXHJcblx0fSlcclxuXHQuZXJyb3IoZnVuY3Rpb24ocG9zdHMpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdlcnJvcicpXHJcblx0XHRjb25zb2xlLmxvZyhwb3N0cylcclxuXHR9KTtcclxuXHJcbn1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnUG9zdHNTdmMnLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcblx0Y29uc29sZS5sb2coXCJlcnJvclwiKVxyXG5cdHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpe1xyXG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXHJcblx0fVxyXG5cclxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xyXG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLHBvc3QpXHJcblx0fVxyXG59XSlcclxuIiwiLyogXHJcbiogQEF1dGhvcjogcm92ZXJ6b25cclxuKiBARGF0ZTogICAyMDE1LTA0LTE3IDE0OjE0OjAzXHJcbiogQExhc3QgTW9kaWZpZWQgYnk6ICAgcm92ZXJ6b25cclxuKiBATGFzdCBNb2RpZmllZCB0aW1lOiAyMDE1LTA0LTE3IDE0OjMzOjM5XHJcbiovXHJcblxyXG4vKipcclxuKiBhcHAgTW9kdWxlXHJcbipcclxuKiBEZXNjcmlwdGlvblxyXG4qL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIFsnJHNjb3BlJywnVXNlclN2YycsIGZ1bmN0aW9uICgkc2NvcGUgLCBVc2VyU3ZjKSB7XHJcblxyXG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuXHRcdFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUscGFzc3dvcmQpXHJcblx0XHQudGhlbihmdW5jdGlvbih1c2VyKXtcclxuXHRcdFx0Y29uc29sZS5sb2codXNlcilcclxuXHRcdH0pXHJcblx0fVxyXG5cdFxyXG59XSkiLCIvKiBcclxuKiBAQXV0aG9yOiByb3ZlcnpvblxyXG4qIEBEYXRlOiAgIDIwMTUtMDQtMTYgMTQ6NTQ6MTZcclxuKiBATGFzdCBNb2RpZmllZCBieTogICByb3ZlcnpvblxyXG4qIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTUtMDQtMTYgMTU6MzI6MzdcclxuKi9cclxuXHJcbi8qKlxyXG4qICBNb2R1bGVcclxuKlxyXG4qIERlc2NyaXB0aW9uXHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInICwgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XHJcblx0JHJvdXRlUHJvdmlkZXJcclxuXHQud2hlbignLycsIHtjb250cm9sbGVyIDogJ1Bvc3RzQ3RybCcsdGVtcGxhdGVVcmwgOiAncG9zdHMuaHRtbCd9KVxyXG5cdC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlciA6ICdSZWdpc3RlckN0cmwnLHRlbXBsYXRlVXJsIDogJ3JlZ2lzdGVyLmh0bWwnfSlcclxuXHQud2hlbignL2xvZ2luJywge2NvbnRyb2xsZXIgOiAnTG9naW5DdHJsJyx0ZW1wbGF0ZVVybCA6ICdsb2dpbi5odG1sJ30pXHJcbn1dKSIsIi8qIFxyXG4qIEBBdXRob3I6IHJvdmVyem9uXHJcbiogQERhdGU6ICAgMjAxNS0wNC0xNiAxNjoxMTowM1xyXG4qIEBMYXN0IE1vZGlmaWVkIGJ5OiAgIHJvdmVyem9uXHJcbiogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxNS0wNC0xNyAxNToxMzowMVxyXG4qL1xyXG5cclxuLyoqXHJcbiogYXBwIE1vZHVsZVxyXG4qXHJcbiogRGVzY3JpcHRpb25cclxuKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgWyckaHR0cCcsZnVuY3Rpb24gKCRodHRwKSB7XHJcblx0dmFyIHN2YyA9IHRoaXNcclxuXHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyx7XHJcblx0XHRcdGhlYWRlcnM6eydYLUF1dGgnOnRoaXMudG9rZW59XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe1xyXG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLHtcclxuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lICwgcGFzc3dvcmQgOiBwYXNzd29yZFxyXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1xyXG5cdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YVxyXG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxyXG5cdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJyx7XHJcblx0XHRcdHVzZXJuYW1lIDogdXNlcm5hbWUgLCBwYXNzd29yZCA6IHBhc3N3b3JkXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcbn1dKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
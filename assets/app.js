angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("login",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsSvc",function(o,t,n){o.addPost=function(){o.postBody&&n.create({body:o.postBody})},n.fetch().success(function(t){o.posts=t}).error(function(o){console.log("error"),console.log(o)}),o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){console.log("error"),this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,t){o.register=function(o,n){t.register(o,n).then(function(o){console.log(o)})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(t,n){return o.post("/api/users",{username:t,password:n})}}]),angular.module("app").run(["$rootScope",function(o){!function t(){var n="ws://localhost:3000",e=new WebSocket(n);e.onclose=function(o){console.log("Websocket closed. Reconnecting"),$timeout(t,1e4)},e.onmessage=function(t){console.log(t);var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,